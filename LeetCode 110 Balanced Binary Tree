Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

node1 = TreeNode(1)
node2 = TreeNode(2)
node3 = TreeNode(2)
node4 = TreeNode(3)
node5 = TreeNode(3)
node6 = TreeNode(4)
node7 = TreeNode(4)
node1.left = node2
node1.right = node3
node2.left = node4
node2.right = node5
node4.left = node6
node4.right = node7

class Solution():
    def __init__(self):
        self.temp = True

    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        self.helper(root)
        return self.temp

    def helper(self, root):
        if root:
            leftdepth = self.helper(root.left)
            rightdepth = self.helper(root.right)
            if abs(leftdepth - rightdepth) > 1:
                self.temp = False
            return max(leftdepth, rightdepth) + 1
        return 0

print(Solution().isBalanced(node1))
